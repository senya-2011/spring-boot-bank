/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardCreateRequest from '../model/CardCreateRequest';
import CardResponse from '../model/CardResponse';
import CardUpdateStatusRequest from '../model/CardUpdateStatusRequest';
import PageCardResponse from '../model/PageCardResponse';
import Pageable from '../model/Pageable';

/**
* CardController service.
* @module api/CardControllerApi
* @version v0
*/
export default class CardControllerApi {

    /**
    * Constructs a new CardControllerApi. 
    * @alias module:api/CardControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/CardControllerApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId 
     * @param {module:api/CardControllerApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling callDelete");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cards/{cardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/CardControllerApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:model/CardCreateRequest} cardCreateRequest 
     * @param {module:api/CardControllerApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardResponse}
     */
    create(userId, cardCreateRequest, callback) {
      let postBody = cardCreateRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling create");
      }
      // verify the required parameter 'cardCreateRequest' is set
      if (cardCreateRequest === undefined || cardCreateRequest === null) {
        throw new Error("Missing the required parameter 'cardCreateRequest' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CardResponse;
      return this.apiClient.callApi(
        '/api/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/CardControllerApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Pageable} pageable 
     * @param {module:api/CardControllerApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageCardResponse}
     */
    list(pageable, callback) {
      let postBody = null;
      // verify the required parameter 'pageable' is set
      if (pageable === undefined || pageable === null) {
        throw new Error("Missing the required parameter 'pageable' when calling list");
      }

      let pathParams = {
      };
      let queryParams = {
        'pageable': pageable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PageCardResponse;
      return this.apiClient.callApi(
        '/api/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStatus operation.
     * @callback module:api/CardControllerApi~updateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId 
     * @param {module:model/CardUpdateStatusRequest} cardUpdateStatusRequest 
     * @param {module:api/CardControllerApi~updateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardResponse}
     */
    updateStatus(cardId, cardUpdateStatusRequest, callback) {
      let postBody = cardUpdateStatusRequest;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling updateStatus");
      }
      // verify the required parameter 'cardUpdateStatusRequest' is set
      if (cardUpdateStatusRequest === undefined || cardUpdateStatusRequest === null) {
        throw new Error("Missing the required parameter 'cardUpdateStatusRequest' when calling updateStatus");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CardResponse;
      return this.apiClient.callApi(
        '/api/cards/{cardId}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
